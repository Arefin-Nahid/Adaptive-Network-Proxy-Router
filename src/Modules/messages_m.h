//
// Generated file, do not edit! Created by opp_msgtool 6.2 from Modules/messages.msg.
//

#ifndef __MESSAGES_M_H
#define __MESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0602
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class DHCPDiscover;
class DHCPOffer;
class DHCPRequest;
class DHCPAck;
class HTTPRequest;
class HTTPResponse;
class CacheQuery;
class CacheResponse;
class CacheStore;
class CacheEvict;
class TTLUpdate;
class TTLQuery;
class RouteUpdate;
class RouteQuery;
class RouteResponse;
class PoisonAttempt;
class SecurityAlert;
class ThreatDetection;
class NetworkStats;
class PerformanceMetrics;
/**
 * Class generated from <tt>Modules/messages.msg:6</tt> by opp_msgtool.
 * <pre>
 * // DHCP Message Types
 * message DHCPDiscover
 * {
 *     string clientMac;
 *     string transactionId;
 *     double timestamp \@unit(s);
 * }
 * </pre>
 */
class DHCPDiscover : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string clientMac;
    omnetpp::opp_string transactionId;
    double timestamp = 0;

  private:
    void copy(const DHCPDiscover& other);

  protected:
    bool operator==(const DHCPDiscover&) = delete;

  public:
    DHCPDiscover(const char *name=nullptr, short kind=0);
    DHCPDiscover(const DHCPDiscover& other);
    virtual ~DHCPDiscover();
    DHCPDiscover& operator=(const DHCPDiscover& other);
    virtual DHCPDiscover *dup() const override {return new DHCPDiscover(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getClientMac() const;
    virtual void setClientMac(const char * clientMac);

    virtual const char * getTransactionId() const;
    virtual void setTransactionId(const char * transactionId);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DHCPDiscover& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DHCPDiscover& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:13</tt> by opp_msgtool.
 * <pre>
 * message DHCPOffer
 * {
 *     string serverMac;
 *     string clientMac;
 *     string offeredIP;
 *     string serverIP;
 *     double leaseTime \@unit(s);
 *     string transactionId;
 *     bool isRogue = false;
 * }
 * </pre>
 */
class DHCPOffer : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string serverMac;
    omnetpp::opp_string clientMac;
    omnetpp::opp_string offeredIP;
    omnetpp::opp_string serverIP;
    double leaseTime = 0;
    omnetpp::opp_string transactionId;
    bool isRogue_ = false;

  private:
    void copy(const DHCPOffer& other);

  protected:
    bool operator==(const DHCPOffer&) = delete;

  public:
    DHCPOffer(const char *name=nullptr, short kind=0);
    DHCPOffer(const DHCPOffer& other);
    virtual ~DHCPOffer();
    DHCPOffer& operator=(const DHCPOffer& other);
    virtual DHCPOffer *dup() const override {return new DHCPOffer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getServerMac() const;
    virtual void setServerMac(const char * serverMac);

    virtual const char * getClientMac() const;
    virtual void setClientMac(const char * clientMac);

    virtual const char * getOfferedIP() const;
    virtual void setOfferedIP(const char * offeredIP);

    virtual const char * getServerIP() const;
    virtual void setServerIP(const char * serverIP);

    virtual double getLeaseTime() const;
    virtual void setLeaseTime(double leaseTime);

    virtual const char * getTransactionId() const;
    virtual void setTransactionId(const char * transactionId);

    virtual bool isRogue() const;
    virtual void setIsRogue(bool isRogue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DHCPOffer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DHCPOffer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:24</tt> by opp_msgtool.
 * <pre>
 * message DHCPRequest
 * {
 *     string clientMac;
 *     string requestedIP;
 *     string serverIP;
 *     string transactionId;
 *     double timestamp \@unit(s);
 * }
 * </pre>
 */
class DHCPRequest : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string clientMac;
    omnetpp::opp_string requestedIP;
    omnetpp::opp_string serverIP;
    omnetpp::opp_string transactionId;
    double timestamp = 0;

  private:
    void copy(const DHCPRequest& other);

  protected:
    bool operator==(const DHCPRequest&) = delete;

  public:
    DHCPRequest(const char *name=nullptr, short kind=0);
    DHCPRequest(const DHCPRequest& other);
    virtual ~DHCPRequest();
    DHCPRequest& operator=(const DHCPRequest& other);
    virtual DHCPRequest *dup() const override {return new DHCPRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getClientMac() const;
    virtual void setClientMac(const char * clientMac);

    virtual const char * getRequestedIP() const;
    virtual void setRequestedIP(const char * requestedIP);

    virtual const char * getServerIP() const;
    virtual void setServerIP(const char * serverIP);

    virtual const char * getTransactionId() const;
    virtual void setTransactionId(const char * transactionId);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DHCPRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DHCPRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:33</tt> by opp_msgtool.
 * <pre>
 * message DHCPAck
 * {
 *     string serverMac;
 *     string clientMac;
 *     string assignedIP;
 *     string serverIP;
 *     double leaseTime \@unit(s);
 *     string transactionId;
 *     bool isRogue = false;
 * }
 * </pre>
 */
class DHCPAck : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string serverMac;
    omnetpp::opp_string clientMac;
    omnetpp::opp_string assignedIP;
    omnetpp::opp_string serverIP;
    double leaseTime = 0;
    omnetpp::opp_string transactionId;
    bool isRogue_ = false;

  private:
    void copy(const DHCPAck& other);

  protected:
    bool operator==(const DHCPAck&) = delete;

  public:
    DHCPAck(const char *name=nullptr, short kind=0);
    DHCPAck(const DHCPAck& other);
    virtual ~DHCPAck();
    DHCPAck& operator=(const DHCPAck& other);
    virtual DHCPAck *dup() const override {return new DHCPAck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getServerMac() const;
    virtual void setServerMac(const char * serverMac);

    virtual const char * getClientMac() const;
    virtual void setClientMac(const char * clientMac);

    virtual const char * getAssignedIP() const;
    virtual void setAssignedIP(const char * assignedIP);

    virtual const char * getServerIP() const;
    virtual void setServerIP(const char * serverIP);

    virtual double getLeaseTime() const;
    virtual void setLeaseTime(double leaseTime);

    virtual const char * getTransactionId() const;
    virtual void setTransactionId(const char * transactionId);

    virtual bool isRogue() const;
    virtual void setIsRogue(bool isRogue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DHCPAck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DHCPAck& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:45</tt> by opp_msgtool.
 * <pre>
 * // HTTP Message Types
 * message HTTPRequest
 * {
 *     string method; // GET, POST, etc.
 *     string url;
 *     string host;
 *     string userAgent;
 *     double timestamp \@unit(s);
 *     string cacheKey;
 *     bool bypassCache = false;
 * }
 * </pre>
 */
class HTTPRequest : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string method;
    omnetpp::opp_string url;
    omnetpp::opp_string host;
    omnetpp::opp_string userAgent;
    double timestamp = 0;
    omnetpp::opp_string cacheKey;
    bool bypassCache = false;

  private:
    void copy(const HTTPRequest& other);

  protected:
    bool operator==(const HTTPRequest&) = delete;

  public:
    HTTPRequest(const char *name=nullptr, short kind=0);
    HTTPRequest(const HTTPRequest& other);
    virtual ~HTTPRequest();
    HTTPRequest& operator=(const HTTPRequest& other);
    virtual HTTPRequest *dup() const override {return new HTTPRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getMethod() const;
    virtual void setMethod(const char * method);

    virtual const char * getUrl() const;
    virtual void setUrl(const char * url);

    virtual const char * getHost() const;
    virtual void setHost(const char * host);

    virtual const char * getUserAgent() const;
    virtual void setUserAgent(const char * userAgent);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual const char * getCacheKey() const;
    virtual void setCacheKey(const char * cacheKey);

    virtual bool getBypassCache() const;
    virtual void setBypassCache(bool bypassCache);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HTTPRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HTTPRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:56</tt> by opp_msgtool.
 * <pre>
 * message HTTPResponse
 * {
 *     int statusCode;
 *     string contentType;
 *     int contentLength;
 *     string etag;
 *     double lastModified \@unit(s);
 *     double expires \@unit(s);
 *     string cacheControl;
 *     string contentHash;
 *     bool fromCache = false;
 *     double responseTime \@unit(s);
 * }
 * </pre>
 */
class HTTPResponse : public ::omnetpp::cMessage
{
  protected:
    int statusCode = 0;
    omnetpp::opp_string contentType;
    int contentLength = 0;
    omnetpp::opp_string etag;
    double lastModified = 0;
    double expires = 0;
    omnetpp::opp_string cacheControl;
    omnetpp::opp_string contentHash;
    bool fromCache = false;
    double responseTime = 0;

  private:
    void copy(const HTTPResponse& other);

  protected:
    bool operator==(const HTTPResponse&) = delete;

  public:
    HTTPResponse(const char *name=nullptr, short kind=0);
    HTTPResponse(const HTTPResponse& other);
    virtual ~HTTPResponse();
    HTTPResponse& operator=(const HTTPResponse& other);
    virtual HTTPResponse *dup() const override {return new HTTPResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getStatusCode() const;
    virtual void setStatusCode(int statusCode);

    virtual const char * getContentType() const;
    virtual void setContentType(const char * contentType);

    virtual int getContentLength() const;
    virtual void setContentLength(int contentLength);

    virtual const char * getEtag() const;
    virtual void setEtag(const char * etag);

    virtual double getLastModified() const;
    virtual void setLastModified(double lastModified);

    virtual double getExpires() const;
    virtual void setExpires(double expires);

    virtual const char * getCacheControl() const;
    virtual void setCacheControl(const char * cacheControl);

    virtual const char * getContentHash() const;
    virtual void setContentHash(const char * contentHash);

    virtual bool getFromCache() const;
    virtual void setFromCache(bool fromCache);

    virtual double getResponseTime() const;
    virtual void setResponseTime(double responseTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HTTPResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HTTPResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:71</tt> by opp_msgtool.
 * <pre>
 * // Cache Management Messages
 * message CacheQuery
 * {
 *     string cacheKey;
 *     string url;
 *     double timestamp \@unit(s);
 *     bool forceRefresh = false;
 * }
 * </pre>
 */
class CacheQuery : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string cacheKey;
    omnetpp::opp_string url;
    double timestamp = 0;
    bool forceRefresh = false;

  private:
    void copy(const CacheQuery& other);

  protected:
    bool operator==(const CacheQuery&) = delete;

  public:
    CacheQuery(const char *name=nullptr, short kind=0);
    CacheQuery(const CacheQuery& other);
    virtual ~CacheQuery();
    CacheQuery& operator=(const CacheQuery& other);
    virtual CacheQuery *dup() const override {return new CacheQuery(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getCacheKey() const;
    virtual void setCacheKey(const char * cacheKey);

    virtual const char * getUrl() const;
    virtual void setUrl(const char * url);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual bool getForceRefresh() const;
    virtual void setForceRefresh(bool forceRefresh);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CacheQuery& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CacheQuery& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:79</tt> by opp_msgtool.
 * <pre>
 * message CacheResponse
 * {
 *     string cacheKey;
 *     bool hit;
 *     string contentHash;
 *     double ttl \@unit(s);
 *     double size \@unit(bytes);
 *     double timestamp \@unit(s);
 * }
 * </pre>
 */
class CacheResponse : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string cacheKey;
    bool hit = false;
    omnetpp::opp_string contentHash;
    double ttl = 0;
    double size = 0;
    double timestamp = 0;

  private:
    void copy(const CacheResponse& other);

  protected:
    bool operator==(const CacheResponse&) = delete;

  public:
    CacheResponse(const char *name=nullptr, short kind=0);
    CacheResponse(const CacheResponse& other);
    virtual ~CacheResponse();
    CacheResponse& operator=(const CacheResponse& other);
    virtual CacheResponse *dup() const override {return new CacheResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getCacheKey() const;
    virtual void setCacheKey(const char * cacheKey);

    virtual bool getHit() const;
    virtual void setHit(bool hit);

    virtual const char * getContentHash() const;
    virtual void setContentHash(const char * contentHash);

    virtual double getTtl() const;
    virtual void setTtl(double ttl);

    virtual double getSize() const;
    virtual void setSize(double size);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CacheResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CacheResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:89</tt> by opp_msgtool.
 * <pre>
 * message CacheStore
 * {
 *     string cacheKey;
 *     string contentHash;
 *     double ttl \@unit(s);
 *     double size \@unit(bytes);
 *     string url;
 *     double timestamp \@unit(s);
 *     int priority = 0;
 * }
 * </pre>
 */
class CacheStore : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string cacheKey;
    omnetpp::opp_string contentHash;
    double ttl = 0;
    double size = 0;
    omnetpp::opp_string url;
    double timestamp = 0;
    int priority = 0;

  private:
    void copy(const CacheStore& other);

  protected:
    bool operator==(const CacheStore&) = delete;

  public:
    CacheStore(const char *name=nullptr, short kind=0);
    CacheStore(const CacheStore& other);
    virtual ~CacheStore();
    CacheStore& operator=(const CacheStore& other);
    virtual CacheStore *dup() const override {return new CacheStore(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getCacheKey() const;
    virtual void setCacheKey(const char * cacheKey);

    virtual const char * getContentHash() const;
    virtual void setContentHash(const char * contentHash);

    virtual double getTtl() const;
    virtual void setTtl(double ttl);

    virtual double getSize() const;
    virtual void setSize(double size);

    virtual const char * getUrl() const;
    virtual void setUrl(const char * url);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual int getPriority() const;
    virtual void setPriority(int priority);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CacheStore& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CacheStore& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:100</tt> by opp_msgtool.
 * <pre>
 * message CacheEvict
 * {
 *     string cacheKey;
 *     string reason;
 *     double timestamp \@unit(s);
 * }
 * </pre>
 */
class CacheEvict : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string cacheKey;
    omnetpp::opp_string reason;
    double timestamp = 0;

  private:
    void copy(const CacheEvict& other);

  protected:
    bool operator==(const CacheEvict&) = delete;

  public:
    CacheEvict(const char *name=nullptr, short kind=0);
    CacheEvict(const CacheEvict& other);
    virtual ~CacheEvict();
    CacheEvict& operator=(const CacheEvict& other);
    virtual CacheEvict *dup() const override {return new CacheEvict(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getCacheKey() const;
    virtual void setCacheKey(const char * cacheKey);

    virtual const char * getReason() const;
    virtual void setReason(const char * reason);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CacheEvict& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CacheEvict& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:108</tt> by opp_msgtool.
 * <pre>
 * // Adaptive TTL Messages
 * message TTLUpdate
 * {
 *     string cacheKey;
 *     double newTTL \@unit(s);
 *     double hitRate;
 *     double accessFrequency;
 *     double timestamp \@unit(s);
 * }
 * </pre>
 */
class TTLUpdate : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string cacheKey;
    double newTTL = 0;
    double hitRate = 0;
    double accessFrequency = 0;
    double timestamp = 0;

  private:
    void copy(const TTLUpdate& other);

  protected:
    bool operator==(const TTLUpdate&) = delete;

  public:
    TTLUpdate(const char *name=nullptr, short kind=0);
    TTLUpdate(const TTLUpdate& other);
    virtual ~TTLUpdate();
    TTLUpdate& operator=(const TTLUpdate& other);
    virtual TTLUpdate *dup() const override {return new TTLUpdate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getCacheKey() const;
    virtual void setCacheKey(const char * cacheKey);

    virtual double getNewTTL() const;
    virtual void setNewTTL(double newTTL);

    virtual double getHitRate() const;
    virtual void setHitRate(double hitRate);

    virtual double getAccessFrequency() const;
    virtual void setAccessFrequency(double accessFrequency);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TTLUpdate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TTLUpdate& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:117</tt> by opp_msgtool.
 * <pre>
 * message TTLQuery
 * {
 *     string cacheKey;
 *     double currentTTL \@unit(s);
 *     double hitCount;
 *     double missCount;
 *     double timestamp \@unit(s);
 * }
 * </pre>
 */
class TTLQuery : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string cacheKey;
    double currentTTL = 0;
    double hitCount = 0;
    double missCount = 0;
    double timestamp = 0;

  private:
    void copy(const TTLQuery& other);

  protected:
    bool operator==(const TTLQuery&) = delete;

  public:
    TTLQuery(const char *name=nullptr, short kind=0);
    TTLQuery(const TTLQuery& other);
    virtual ~TTLQuery();
    TTLQuery& operator=(const TTLQuery& other);
    virtual TTLQuery *dup() const override {return new TTLQuery(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getCacheKey() const;
    virtual void setCacheKey(const char * cacheKey);

    virtual double getCurrentTTL() const;
    virtual void setCurrentTTL(double currentTTL);

    virtual double getHitCount() const;
    virtual void setHitCount(double hitCount);

    virtual double getMissCount() const;
    virtual void setMissCount(double missCount);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TTLQuery& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TTLQuery& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:127</tt> by opp_msgtool.
 * <pre>
 * // Learning Router Messages
 * message RouteUpdate
 * {
 *     string destination;
 *     string nextHop;
 *     int hopCount;
 *     double cost;
 *     double timestamp \@unit(s);
 *     bool isLearned = true;
 * }
 * </pre>
 */
class RouteUpdate : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string destination;
    omnetpp::opp_string nextHop;
    int hopCount = 0;
    double cost = 0;
    double timestamp = 0;
    bool isLearned_ = true;

  private:
    void copy(const RouteUpdate& other);

  protected:
    bool operator==(const RouteUpdate&) = delete;

  public:
    RouteUpdate(const char *name=nullptr, short kind=0);
    RouteUpdate(const RouteUpdate& other);
    virtual ~RouteUpdate();
    RouteUpdate& operator=(const RouteUpdate& other);
    virtual RouteUpdate *dup() const override {return new RouteUpdate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getDestination() const;
    virtual void setDestination(const char * destination);

    virtual const char * getNextHop() const;
    virtual void setNextHop(const char * nextHop);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual double getCost() const;
    virtual void setCost(double cost);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual bool isLearned() const;
    virtual void setIsLearned(bool isLearned);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RouteUpdate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RouteUpdate& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:137</tt> by opp_msgtool.
 * <pre>
 * message RouteQuery
 * {
 *     string destination;
 *     double timestamp \@unit(s);
 * }
 * </pre>
 */
class RouteQuery : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string destination;
    double timestamp = 0;

  private:
    void copy(const RouteQuery& other);

  protected:
    bool operator==(const RouteQuery&) = delete;

  public:
    RouteQuery(const char *name=nullptr, short kind=0);
    RouteQuery(const RouteQuery& other);
    virtual ~RouteQuery();
    RouteQuery& operator=(const RouteQuery& other);
    virtual RouteQuery *dup() const override {return new RouteQuery(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getDestination() const;
    virtual void setDestination(const char * destination);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RouteQuery& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RouteQuery& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:143</tt> by opp_msgtool.
 * <pre>
 * message RouteResponse
 * {
 *     string destination;
 *     string nextHop;
 *     int hopCount;
 *     double cost;
 *     bool found;
 *     double timestamp \@unit(s);
 * }
 * </pre>
 */
class RouteResponse : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string destination;
    omnetpp::opp_string nextHop;
    int hopCount = 0;
    double cost = 0;
    bool found = false;
    double timestamp = 0;

  private:
    void copy(const RouteResponse& other);

  protected:
    bool operator==(const RouteResponse&) = delete;

  public:
    RouteResponse(const char *name=nullptr, short kind=0);
    RouteResponse(const RouteResponse& other);
    virtual ~RouteResponse();
    RouteResponse& operator=(const RouteResponse& other);
    virtual RouteResponse *dup() const override {return new RouteResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getDestination() const;
    virtual void setDestination(const char * destination);

    virtual const char * getNextHop() const;
    virtual void setNextHop(const char * nextHop);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual double getCost() const;
    virtual void setCost(double cost);

    virtual bool getFound() const;
    virtual void setFound(bool found);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RouteResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RouteResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:154</tt> by opp_msgtool.
 * <pre>
 * // Security/Attack Messages
 * message PoisonAttempt
 * {
 *     string targetCacheKey;
 *     string maliciousContent;
 *     string attackerId;
 *     double timestamp \@unit(s);
 *     double successRate;
 * }
 * </pre>
 */
class PoisonAttempt : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string targetCacheKey;
    omnetpp::opp_string maliciousContent;
    omnetpp::opp_string attackerId;
    double timestamp = 0;
    double successRate = 0;

  private:
    void copy(const PoisonAttempt& other);

  protected:
    bool operator==(const PoisonAttempt&) = delete;

  public:
    PoisonAttempt(const char *name=nullptr, short kind=0);
    PoisonAttempt(const PoisonAttempt& other);
    virtual ~PoisonAttempt();
    PoisonAttempt& operator=(const PoisonAttempt& other);
    virtual PoisonAttempt *dup() const override {return new PoisonAttempt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getTargetCacheKey() const;
    virtual void setTargetCacheKey(const char * targetCacheKey);

    virtual const char * getMaliciousContent() const;
    virtual void setMaliciousContent(const char * maliciousContent);

    virtual const char * getAttackerId() const;
    virtual void setAttackerId(const char * attackerId);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual double getSuccessRate() const;
    virtual void setSuccessRate(double successRate);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PoisonAttempt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PoisonAttempt& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:163</tt> by opp_msgtool.
 * <pre>
 * message SecurityAlert
 * {
 *     string alertType; // "DHCP_SPOOF", "CACHE_POISON", "ROUTE_HIJACK"
 *     string source;
 *     string target;
 *     double severity; // 0.0 to 1.0
 *     double timestamp \@unit(s);
 *     string description;
 * }
 * </pre>
 */
class SecurityAlert : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string alertType;
    omnetpp::opp_string source;
    omnetpp::opp_string target;
    double severity = 0;
    double timestamp = 0;
    omnetpp::opp_string description;

  private:
    void copy(const SecurityAlert& other);

  protected:
    bool operator==(const SecurityAlert&) = delete;

  public:
    SecurityAlert(const char *name=nullptr, short kind=0);
    SecurityAlert(const SecurityAlert& other);
    virtual ~SecurityAlert();
    SecurityAlert& operator=(const SecurityAlert& other);
    virtual SecurityAlert *dup() const override {return new SecurityAlert(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getAlertType() const;
    virtual void setAlertType(const char * alertType);

    virtual const char * getSource() const;
    virtual void setSource(const char * source);

    virtual const char * getTarget() const;
    virtual void setTarget(const char * target);

    virtual double getSeverity() const;
    virtual void setSeverity(double severity);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual const char * getDescription() const;
    virtual void setDescription(const char * description);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SecurityAlert& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SecurityAlert& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:173</tt> by opp_msgtool.
 * <pre>
 * message ThreatDetection
 * {
 *     string threatType;
 *     string sourceIP;
 *     string targetIP;
 *     double confidence;
 *     double timestamp \@unit(s);
 *     string mitigation;
 * }
 * </pre>
 */
class ThreatDetection : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string threatType;
    omnetpp::opp_string sourceIP;
    omnetpp::opp_string targetIP;
    double confidence = 0;
    double timestamp = 0;
    omnetpp::opp_string mitigation;

  private:
    void copy(const ThreatDetection& other);

  protected:
    bool operator==(const ThreatDetection&) = delete;

  public:
    ThreatDetection(const char *name=nullptr, short kind=0);
    ThreatDetection(const ThreatDetection& other);
    virtual ~ThreatDetection();
    ThreatDetection& operator=(const ThreatDetection& other);
    virtual ThreatDetection *dup() const override {return new ThreatDetection(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getThreatType() const;
    virtual void setThreatType(const char * threatType);

    virtual const char * getSourceIP() const;
    virtual void setSourceIP(const char * sourceIP);

    virtual const char * getTargetIP() const;
    virtual void setTargetIP(const char * targetIP);

    virtual double getConfidence() const;
    virtual void setConfidence(double confidence);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual const char * getMitigation() const;
    virtual void setMitigation(const char * mitigation);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ThreatDetection& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ThreatDetection& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:184</tt> by opp_msgtool.
 * <pre>
 * // Network Statistics Messages
 * message NetworkStats
 * {
 *     double cacheHitRate;
 *     double averageLatency \@unit(s);
 *     double throughput \@unit(bps);
 *     int activeConnections;
 *     double dhcpSuccessRate;
 *     double securityThreats;
 *     double timestamp \@unit(s);
 * }
 * </pre>
 */
class NetworkStats : public ::omnetpp::cMessage
{
  protected:
    double cacheHitRate = 0;
    double averageLatency = 0;
    double throughput = 0;
    int activeConnections = 0;
    double dhcpSuccessRate = 0;
    double securityThreats = 0;
    double timestamp = 0;

  private:
    void copy(const NetworkStats& other);

  protected:
    bool operator==(const NetworkStats&) = delete;

  public:
    NetworkStats(const char *name=nullptr, short kind=0);
    NetworkStats(const NetworkStats& other);
    virtual ~NetworkStats();
    NetworkStats& operator=(const NetworkStats& other);
    virtual NetworkStats *dup() const override {return new NetworkStats(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual double getCacheHitRate() const;
    virtual void setCacheHitRate(double cacheHitRate);

    virtual double getAverageLatency() const;
    virtual void setAverageLatency(double averageLatency);

    virtual double getThroughput() const;
    virtual void setThroughput(double throughput);

    virtual int getActiveConnections() const;
    virtual void setActiveConnections(int activeConnections);

    virtual double getDhcpSuccessRate() const;
    virtual void setDhcpSuccessRate(double dhcpSuccessRate);

    virtual double getSecurityThreats() const;
    virtual void setSecurityThreats(double securityThreats);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NetworkStats& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NetworkStats& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Modules/messages.msg:195</tt> by opp_msgtool.
 * <pre>
 * message PerformanceMetrics
 * {
 *     string componentId;
 *     double cpuUsage;
 *     double memoryUsage;
 *     double diskUsage;
 *     double networkUsage;
 *     double timestamp \@unit(s);
 * }
 * </pre>
 */
class PerformanceMetrics : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string componentId;
    double cpuUsage = 0;
    double memoryUsage = 0;
    double diskUsage = 0;
    double networkUsage = 0;
    double timestamp = 0;

  private:
    void copy(const PerformanceMetrics& other);

  protected:
    bool operator==(const PerformanceMetrics&) = delete;

  public:
    PerformanceMetrics(const char *name=nullptr, short kind=0);
    PerformanceMetrics(const PerformanceMetrics& other);
    virtual ~PerformanceMetrics();
    PerformanceMetrics& operator=(const PerformanceMetrics& other);
    virtual PerformanceMetrics *dup() const override {return new PerformanceMetrics(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getComponentId() const;
    virtual void setComponentId(const char * componentId);

    virtual double getCpuUsage() const;
    virtual void setCpuUsage(double cpuUsage);

    virtual double getMemoryUsage() const;
    virtual void setMemoryUsage(double memoryUsage);

    virtual double getDiskUsage() const;
    virtual void setDiskUsage(double diskUsage);

    virtual double getNetworkUsage() const;
    virtual void setNetworkUsage(double networkUsage);

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PerformanceMetrics& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PerformanceMetrics& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline DHCPDiscover *fromAnyPtr(any_ptr ptr) { return check_and_cast<DHCPDiscover*>(ptr.get<cObject>()); }
template<> inline DHCPOffer *fromAnyPtr(any_ptr ptr) { return check_and_cast<DHCPOffer*>(ptr.get<cObject>()); }
template<> inline DHCPRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<DHCPRequest*>(ptr.get<cObject>()); }
template<> inline DHCPAck *fromAnyPtr(any_ptr ptr) { return check_and_cast<DHCPAck*>(ptr.get<cObject>()); }
template<> inline HTTPRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<HTTPRequest*>(ptr.get<cObject>()); }
template<> inline HTTPResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<HTTPResponse*>(ptr.get<cObject>()); }
template<> inline CacheQuery *fromAnyPtr(any_ptr ptr) { return check_and_cast<CacheQuery*>(ptr.get<cObject>()); }
template<> inline CacheResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<CacheResponse*>(ptr.get<cObject>()); }
template<> inline CacheStore *fromAnyPtr(any_ptr ptr) { return check_and_cast<CacheStore*>(ptr.get<cObject>()); }
template<> inline CacheEvict *fromAnyPtr(any_ptr ptr) { return check_and_cast<CacheEvict*>(ptr.get<cObject>()); }
template<> inline TTLUpdate *fromAnyPtr(any_ptr ptr) { return check_and_cast<TTLUpdate*>(ptr.get<cObject>()); }
template<> inline TTLQuery *fromAnyPtr(any_ptr ptr) { return check_and_cast<TTLQuery*>(ptr.get<cObject>()); }
template<> inline RouteUpdate *fromAnyPtr(any_ptr ptr) { return check_and_cast<RouteUpdate*>(ptr.get<cObject>()); }
template<> inline RouteQuery *fromAnyPtr(any_ptr ptr) { return check_and_cast<RouteQuery*>(ptr.get<cObject>()); }
template<> inline RouteResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<RouteResponse*>(ptr.get<cObject>()); }
template<> inline PoisonAttempt *fromAnyPtr(any_ptr ptr) { return check_and_cast<PoisonAttempt*>(ptr.get<cObject>()); }
template<> inline SecurityAlert *fromAnyPtr(any_ptr ptr) { return check_and_cast<SecurityAlert*>(ptr.get<cObject>()); }
template<> inline ThreatDetection *fromAnyPtr(any_ptr ptr) { return check_and_cast<ThreatDetection*>(ptr.get<cObject>()); }
template<> inline NetworkStats *fromAnyPtr(any_ptr ptr) { return check_and_cast<NetworkStats*>(ptr.get<cObject>()); }
template<> inline PerformanceMetrics *fromAnyPtr(any_ptr ptr) { return check_and_cast<PerformanceMetrics*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MESSAGES_M_H

